
-- defines adjoint for monotone functions and morphisms in the Poset Category
-- where each morphism has left and right adjoints

module Cubical.Categories.Instances.Preorders.Monotone.Adjoint where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels

open import Cubical.Relation.Binary.Preorder
open import Cubical.Data.Sigma
open import Cubical.HITs.PropositionalTruncation.Base
open import Cubical.HITs.PropositionalTruncation.Properties

open import Cubical.Categories.Instances.Preorders.Monotone


private
  variable
    ‚Ñì ‚Ñì' : Level


module _ {‚Ñì ‚Ñì' : Level} where

  -- the Galois Connection between Posets
  -- adjoints for monotone functions
  record _‚ä£_ {X Y : Preorder ‚Ñì ‚Ñì'}
             (L : MonFun X Y) (R : MonFun Y X) : Type (‚Ñì-max ‚Ñì ‚Ñì') where
    private
      module ùïè = PreorderStr (X .snd)
      module ùïê = PreorderStr (Y .snd)
    field
      adjIff : ‚àÄ {x y} ‚Üí Iso
        ((L $ x) ùïê.‚â§ y)
        (x ùïè.‚â§ (R $ y))

  -- monotone functions that have left and right adjoint
  HasLeftAdj : {X Y : Preorder ‚Ñì ‚Ñì'} ‚Üí (f : MonFun X Y) ‚Üí Type ((‚Ñì-max ‚Ñì ‚Ñì'))
  HasLeftAdj {X} {Y} f = Œ£[ L ‚àà MonFun Y X ] (L ‚ä£ f)

  open isUnivalent
  open IsPreorder
  open _‚ä£_
  open Iso

  -- when assuming that the relation on X is antisymmetric,
  -- we get that adjoints are unique
  isPropHasLeftAdj : {X Y : Preorder ‚Ñì ‚Ñì'}
    ‚Üí (isUnivalent X)
    ‚Üí (f : MonFun X Y)
    ‚Üí isProp (HasLeftAdj f)
  isPropHasLeftAdj {X} {Y} po f = Œª (l1 , l1‚ä£f) (l2 , l2‚ä£f ) ‚Üí
    let Xpo = PreorderStr.isPreorder (X .snd)
        l1‚â°l2 = eqMon l1 l2 (funExt (Œª y ‚Üí
                  (posetAntisym po) (l1 $ y) (l2 $ y)
                  -- l1(y) ‚â§ l2(y)
                  ( l1‚ä£f .adjIff .inv
                    (l2‚ä£f .adjIff .fun (Xpo .is-refl (l2 $ y))))
                  -- l2(y) ‚â§ l1(y)
                  (l2‚ä£f .adjIff .inv
                    (l1‚ä£f .adjIff .fun (Xpo .is-refl (l1 $ y))))
                ))
        ‚â§YProp = is-prop-valued (PreorderStr.isPreorder (Y .snd))
    in
    Œ£PathP ( l1‚â°l2  ,
      isProp‚ÜíPathP (Œª i ‚Üí
        Œª l1‚ä£f l2‚ä£f ‚Üí
          Œª j ‚Üí
            record {
              adjIff = Œª {y} {x} ‚Üí
              (Iso‚â°Set
                (isProp‚ÜíisSet (Xpo .is-prop-valued _ _))
                (isProp‚ÜíisSet (‚â§YProp _ _))
                (l1‚ä£f .adjIff) (l2‚ä£f .adjIff)
                (Œª ly‚â§x ‚Üí (‚â§YProp y (f $ x)) _ _)
                (Œª y‚â§fx ‚Üí (Xpo .is-prop-valued ((l1‚â°l2 i) $ y) x) _ _)
              j)
            }
      ) _ _
    )
  HasRightAdj : {X Y : Preorder ‚Ñì ‚Ñì'} ‚Üí (f : MonFun X Y) ‚Üí Type ((‚Ñì-max ‚Ñì ‚Ñì'))
  HasRightAdj {X} {Y} f = Œ£[ R ‚àà MonFun Y X ] (f ‚ä£ R)


  isPropHasRightAdj : {X Y : Preorder ‚Ñì ‚Ñì'}
    ‚Üí (isUnivalent X)
    ‚Üí (f : MonFun X Y)
    ‚Üí isProp (HasRightAdj f)
  isPropHasRightAdj {X} {Y} po f = Œª (r1 , f‚ä£r1) (r2 , f‚ä£r2) ‚Üí
    let Xpo = PreorderStr.isPreorder (X .snd)
        r1‚â°r2 = eqMon r1 r2 (funExt (Œª y ‚Üí
                  (posetAntisym po) (r1 $ y) (r2 $ y)
                  -- r1(y) ‚â§ r2(y)
                  (f‚ä£r2 .adjIff .fun
                    (f‚ä£r1 .adjIff .inv (Xpo .is-refl (r1 $ y))))
                  -- r2(y) ‚â§ r1(y)
                  (f‚ä£r1 .adjIff .fun
                    (f‚ä£r2 .adjIff .inv (Xpo .is-refl (r2 $ y))))
                ))
        ‚â§YProp = is-prop-valued (PreorderStr.isPreorder (Y .snd))
    in
    Œ£PathP ( r1‚â°r2 ,
      isProp‚ÜíPathP (Œª i ‚Üí
        Œª f‚ä£r1 f‚ä£r2 ‚Üí
          Œª j ‚Üí
            record {
              adjIff = Œª {x} {y} ‚Üí
              (Iso‚â°Set
                (isProp‚ÜíisSet (‚â§YProp _ _))
                (isProp‚ÜíisSet (Xpo .is-prop-valued _ _))
                (f‚ä£r1 .adjIff)
                (f‚ä£r2 .adjIff)
                (Œª fx‚â§y ‚Üí (Xpo .is-prop-valued x ((r1‚â°r2 i) $ y)) _ _)
                (Œª x‚â§ry ‚Üí (‚â§YProp (f $ x) y) _ _)
              j)
            }
      ) _ _
    )

  record HasBothAdj {X Y : Preorder ‚Ñì ‚Ñì'}
    (f : MonFun X Y) : Type ((‚Ñì-max ‚Ñì ‚Ñì')) where
    field
      left-adj : HasLeftAdj f
      right-adj : HasRightAdj f

  open HasBothAdj

  isPropHasBothAdj : {X Y : Preorder ‚Ñì ‚Ñì'}
    ‚Üí (isUnivalent X)
    ‚Üí (f : MonFun X Y)
    ‚Üí isProp (HasBothAdj f)
  isPropHasBothAdj pox f = Œª adj1 adj2 ‚Üí
    Œª i ‚Üí record {
      left-adj = isPropHasLeftAdj pox f (adj1 .left-adj) (adj2 .left-adj) i ;
      right-adj = isPropHasRightAdj pox f (adj1 .right-adj) (adj2 .right-adj) i
    }

  MonId‚ä£MonId : {X : Preorder ‚Ñì ‚Ñì'} ‚Üí MonId {X = X} ‚ä£ MonId {X = X}
  MonId‚ä£MonId {X} =
    record { adjIff = iso (Œª h ‚Üí h) (Œª h ‚Üí h) ( Œª _ ‚Üí refl)  (Œª _ ‚Üí refl) }

  IdHasLeftAdj : {X : Preorder ‚Ñì ‚Ñì'} ‚Üí HasLeftAdj {X} {X} MonId
  IdHasLeftAdj {X} = MonId , MonId‚ä£MonId

  IdHasRightAdj : {X : Preorder ‚Ñì ‚Ñì'} ‚Üí HasRightAdj {X} {X} MonId
  IdHasRightAdj {X} = MonId , MonId‚ä£MonId

  IdHasBothAdj : {X : Preorder ‚Ñì ‚Ñì'} ‚Üí HasBothAdj {X} {X} MonId
  IdHasBothAdj {X} = record {
    left-adj = IdHasLeftAdj ;
    right-adj = IdHasRightAdj }

  CompHasLeftAdj : {X Y Z : Preorder ‚Ñì ‚Ñì'} ‚Üí
    {f : MonFun X Y} ‚Üí {g : MonFun Y Z } ‚Üí
    HasLeftAdj f ‚Üí HasLeftAdj g ‚Üí HasLeftAdj (MonComp f g)
  CompHasLeftAdj (l1 , l1‚ä£f) (l2 , l2‚ä£g) = MonComp l2 l1 ,
      record { adjIff = compIso (l1‚ä£f .adjIff) (l2‚ä£g .adjIff) }

  CompHasRightAdj : {X Y Z : Preorder ‚Ñì ‚Ñì'} ‚Üí
    {f : MonFun X Y} ‚Üí {g : MonFun Y Z } ‚Üí
    HasRightAdj f ‚Üí HasRightAdj g ‚Üí HasRightAdj (MonComp f g)
  CompHasRightAdj (r1 , f‚ä£r1) (r2 , g‚ä£r2) = MonComp r2 r1 ,
      record { adjIff = compIso (g‚ä£r2 .adjIff) (f‚ä£r1 .adjIff) }

  CompHasBothAdj : {X Y Z : Preorder ‚Ñì ‚Ñì'} ‚Üí
    {f : MonFun X Y} ‚Üí {g : MonFun Y Z } ‚Üí
    HasBothAdj f ‚Üí HasBothAdj g ‚Üí HasBothAdj (MonComp f g)
  CompHasBothAdj f-adj g-adj = record {
    left-adj = CompHasLeftAdj (f-adj .left-adj) (g-adj .left-adj) ;
    right-adj = CompHasRightAdj (f-adj .right-adj) (g-adj .right-adj) }
